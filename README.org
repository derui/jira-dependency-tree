* JIRA Dependency Tree
This project provides web-app to display dependency tree of issues in JIRA with links.

** Features
- Show dendency graph between JIRA issues
  - Construction of graph is completely automatic
  - only outward link
  - Show details of issue
  - Highlight issue/link that are related hovered it
- Switch layout
  - horizontal/vertical
- Import issues via JQL
- Zoom/Pan on canvas
- Search issue and view it in application
- Edit relations
  - Multiple Delete/Append at one time
  - Filter relations

** Motivation
We wanted to use Advanced Roadmap in my work, but it is too expensive for us. So we decided to build dependency tree by hand.

#+begin_quote
This feature that display issue dependency is one of the most pain point of JIRA Roadmap I think.
#+end_quote

** Images

*** Importer
[[file:doc/screenshot.png]]

*** Relation Editor
[[file:doc/screenshot2.png]]

** Architecture
JIRA Dependency Tree has frontend and server.

- Frontend
  - Built on React.js and redux-observable
  - Built and bundled by [[https://vitejs.dev/][vite]]
  - Built denedency graph by [[https://d3js.org][D3.js]]
- Test
  - Using [[https://docs.cypress.io/][Cypress]] to run test on browser
  - Using [[https://mswjs.io/][msw]] to mock server response
  - Using vitest to run unit test
  - Using testing-library to test component without browser
- Server
  - Built with [[https://www.rust-lang.org/][Rust]]
  - Using framework for AWS Lambda
- Infrastructure
  - Run on AWS Lambda and API Gateway
  - Deploying with CDK

** JIRA Token usage
This application uses JIRA API Token that user generated owned by them. But given tokens does not store any place we promise. we use it only to call JIRA API by server, then destroy from memory.

* Development

#+begin_quote
Some developers does not have personal macOS. We think this application might run on macOS without problem.
#+end_quote

** Prerequirement

- Docker
  - Install it as you like
- AWS SAM CLI
  - Install via AWS SAM
- pnpm
  - install ~npm install -g pnpm~
  - or, other installation process that you used
- Rust
  - We recommend to use rustup to setup Rust.
- AWS CLI Setup

** setup
#+begin_src shell
  # root
  $ pnpm install

  # setup rust
  $ cd server
  $ cargo

  # setup cdk
  $ cd server/cdk
  $ pnpm install
#+end_src

** Run application local
#+begin_src shell
  $ pnpm run start

  # Run in other terminal
  $ cd server/cdk
  # only first time, or we recoomend you run when edit cdk file.
  $ npx cdk synth --no-staging > template.yml
  $ sam build
  $ sam start local-api
#+end_src

** Run CI
#+begin_src shell
  # Run all CI with headless browser
  $ pnpm run it:run

  # Run CI with cypress. To use developing test, debugging
  $ pnpm run it:serve
#+end_src

** Publish

*** Frontend
You should create ~src/env.prod.ts~ before.

#+begin_src typescript
  import { Env } from "./models/env";

  export const env: Env = {
    apiBaseUrl: "<URL of API Gateway>",
    apiKey: "<Generated from CDK deployment>",
  };
#+end_src

Then, run publish command. If you want to publish preview channel, call ~publish:preview~ instead.

#+begin_src shell
  $ pnpm run publish:production
#+end_src

*** Server
#+begin_src shell
  $ cd server/cdk
  $ npx cdk deploy
#+end_src

